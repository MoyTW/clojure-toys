S = (Form)*

<Form> = Eval | MacroChar | Symbol | Literal | Vector | Map (*List requires the quote macro: Set requires the Dispatch macro*) (*'Regular' Forms*)
              | SpecialForm
    Eval = <'('> Form* <')'>
    
    <MacroChar> = Quote | Dispatch | Comment | Metadata (*TODO - | Slash | Metadata*)
        Quote = <"'"> NoEvalForm
            <NoEvalForm> = List | MacroChar | Symbol | Literal | Vector | Map
                List = <'('> Form* <')'>
        Dispatch = <'#'> ReaderMacro
            <ReaderMacro> = Set | Regex | AnonFuncLit (*TODO - | VarQuote | IgnoreForm*)
                Set = <'{'> Form* <'}'>
                Regex = String
                AnonFuncLit = <'('> Form* <')'>
        Comment = ";" #'[^\n]*'
        <Metadata> = SymbolMetadata | KeywordMetadata | StringMetadata | MapMetadata
            SymbolMetadata = "^" Symbol Form
            KeywordMetadata = "^" Keyword Form
            StringMetadata = "^" String Form
            MapMetadata = "^" Map Form
    
    Symbol = #'[a-zA-Z\*\+\!\-\_\?\=<>%][a-zA-Z0-9\*\+\!\-\_\?\=\.<>%]*/?[a-zA-Z0-9\*\+\!\-\_\?\=\.<>%]*' (*TODO - implement the rules regarding dot colons and slash characters*)
    
    <Literal> = String | Number | Character | Boolean | Keyword | 'nil'
        String = <'"'>#'(\\\"|[^"])*'<'"'> (*Matches \\\" or any char not \"*)
        <Number> = Integer | Float | Ratio (* TODO - add in support for hex/oct forms*)
            Integer = #'[+-]?[0-9]+r?[0-9]*' (*The r is so you can do 8r52 - 8 radix 52*)
            Float = #'[+-]?([0-9]*\.[0-9]+|[0-9]+\.[0-9]*)' | (*Decimal form*)
                    #'[+-]?[0-9]+\.?[0-9]*e[+-]?[0-9]+' (*Exponent form*)
            Ratio = #'[+-]?[0-9]+/[0-9]+'
        Character = #'\\.' | '\\newline' | '\\space' | '\\tab' | '\\formfeed' | '\\backspace' | '\\return' (* TODO - add in support for unicode character representations!*)
        Boolean = 'true' | 'false'
        Keyword = #'::?[a-zA-Z0-9\*\+\!\-\_\?]*'
    
    Vector = <'['> Form* <']'>
    Map = <'{'> (Form Form)* <'}'>
    
    <SpecialForm> = JConstructor
        JConstructor = Form '.' Form*